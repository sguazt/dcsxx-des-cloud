#ifndef DCS_OPTIM_LPSOLVE_HPP
#define DCS_OPTIM_LPSOLVE_HPP

#include <lpsolve/lp_lib.h>

namespace dcs { namespace optim { namespace lpsolve {

/// Types

typedef int int_type;
typedef REAL real_type;
typedef LLONG long_long_type;
typedef LREAL long_real_type;
typedef unsigned char bool_type;

using ::lprec;


/// Constants

static const int_type fr_constraint = FR;
static const int_type le_constraint = LE;
static const int_type ge_constraint = GE;
static const int_type eq_constraint = EQ;
static const int_type of_constraint = OF;

static const bool_type true_value = TRUE;
static const bool_type false_value = FALSE;


/// Functions

using ::add_column;
using ::add_columnex;
using ::add_constraint;
using ::add_constraintex;
using ::add_lag_con;
using ::add_SOS;
using ::column_in_lp;
using ::copy_lp;
using ::default_basis;
using ::del_column;
using ::del_constraint;
using ::delete_lp;
using ::dualize_lp;
using ::free_lp;
using ::get_anti_degen;
using ::get_basis;
using ::get_basiscrash;
using ::get_bb_depthlimit;
using ::get_bb_floorfirst;
using ::get_bb_rule;
using ::get_bounds_tighter;
using ::get_break_at_value;
using ::get_col_name;
using ::get_column;
using ::get_columnex;
using ::get_constr_type;
using ::get_constr_value;
using ::get_constraints;
using ::get_dual_solution;
using ::get_epsb;
using ::get_epsd;
using ::get_epsel;
using ::get_epsint;
using ::get_epsperturb;
using ::get_epspivot;
using ::get_improve;
using ::get_infinite;
using ::get_lambda;
using ::get_lowbo;
using ::get_lp_index;
using ::get_lp_name;
using ::get_Lrows;
using ::get_mat;
using ::get_max_level;
using ::get_maxpivot;
using ::get_mip_gap;
using ::get_Ncolumns;
using ::get_nameindex;
using ::get_negrange;
using ::get_nonzeros;
using ::get_Norig_columns;
using ::get_Norig_rows;
using ::get_Nrows;
using ::get_obj_bound;
using ::get_objective;
using ::get_orig_index;
using ::get_origcol_name;
using ::get_origrow_name;
using ::get_pivoting;
using ::get_presolve;
using ::get_presolveloops;
using ::get_primal_solution;
using ::get_print_sol;
using ::get_ptr_constraints;
using ::get_ptr_dual_solution;
using ::get_ptr_lambda;
using ::get_ptr_primal_solution;
using ::get_ptr_sensitivity_obj;
using ::get_ptr_sensitivity_objex;
using ::get_ptr_sensitivity_rhs;
using ::get_ptr_variables;
using ::get_rh;
using ::get_rh_range;
using ::get_row;
using ::get_rowex;
using ::get_row_name;
using ::get_scalelimit;
using ::get_scaling;
using ::get_sensitivity_obj;
using ::get_sensitivity_objex;
using ::get_sensitivity_rhs;
using ::get_simplextype;
using ::get_solutioncount;
using ::get_solutionlimit;
using ::get_status;
using ::get_statustext;
using ::get_timeout;
using ::get_total_iter;
using ::get_total_nodes;
using ::get_upbo;
using ::get_var_branch;
using ::get_var_dualresult;
using ::get_var_primalresult;
using ::get_var_priority;
using ::get_var_priority;
using ::get_variables;
using ::get_verbose;
using ::get_working_objective;
using ::guess_basis;
using ::has_BFP;
using ::has_XLI;
using ::is_add_rowmode;
using ::is_anti_degen;
using ::is_binary;
using ::is_break_at_first;
using ::is_constr_type;
using ::is_debug;
using ::is_feasible;
using ::is_unbounded;
using ::is_infinite;
using ::is_int;
using ::is_integerscaling;
using ::is_lag_trace;
using ::is_maxim;
using ::is_nativeBFP;
using ::is_nativeXLI;
using ::is_negative;
using ::is_obj_in_basis;
using ::is_piv_mode;
using ::is_piv_rule;
using ::is_presolve;
using ::is_scalemode;
using ::is_scaletype;
using ::is_semicont;
using ::is_SOS_var;
using ::is_trace;
using ::is_use_names;
//using ::lag_solve;
using ::lp_solve_version;
using ::make_lp;
using ::MPS_writefileex;
using ::print_constraints;
using ::print_debugdump;
using ::print_duals;
using ::print_lp;
using ::print_objective;
using ::print_scales;
using ::print_solution;
using ::print_str;
using ::print_tableau;
using ::put_abortfunc;
using ::put_bb_branchfunc;
using ::put_bb_nodefunc;
using ::put_logfunc;
using ::put_msgfunc;
using ::read_basis;
using ::read_lp;
using ::read_LP;
using ::read_mps;
using ::read_freemps;
using ::read_MPS;
using ::read_freeMPS;
using ::read_params;
using ::read_XLI;
using ::reset_basis;
using ::reset_params;
using ::resize_lp;
using ::set_add_rowmode;
using ::set_anti_degen;
using ::set_basis;
using ::set_basiscrash;
using ::set_basisvar;
using ::set_bb_depthlimit;
using ::set_bb_floorfirst;
using ::set_bb_rule;
using ::set_BFP;
using ::set_XLI;
using ::set_binary;
using ::set_bounds;
using ::set_bounds_tighter;
using ::set_break_at_first;
using ::set_break_at_value;
using ::set_column;
using ::set_columnex;
using ::set_col_name;
using ::set_constr_type;
using ::set_debug;
using ::set_epsb;
using ::set_epsd;
using ::set_epsel;
using ::set_epsint;
using ::set_epsperturb;
using ::set_epspivot;
using ::set_epslevel;
using ::set_unbounded;
using ::set_improve;
using ::set_infinite;
using ::set_int;
using ::set_lag_trace;
using ::set_lowbo;
using ::set_lp_name;
using ::set_mat;
using ::set_maxim;
using ::set_maxpivot;
using ::set_minim;
using ::set_mip_gap;
using ::set_negrange;
using ::set_obj_bound;
using ::set_obj_fn;
using ::set_obj_fnex;
using ::set_obj;
using ::set_obj_in_basis;
using ::set_outputstream;
using ::set_outputfile;
using ::set_pivoting;
using ::set_preferdual;
using ::set_presolve;
using ::set_print_sol;
using ::set_rh;
using ::set_rh_range;
using ::set_rh_vec;
using ::set_row;
using ::set_rowex;
using ::set_row_name;
using ::set_scalelimit;
using ::set_scaling;
using ::set_semicont;
using ::set_sense;
using ::set_simplextype;
using ::set_solutionlimit;
using ::set_timeout;
using ::set_trace;
using ::set_upbo;
using ::set_use_names;
using ::set_var_branch;
using ::set_var_weights;
using ::set_verbose;
using ::solve;
using ::str_add_column;
using ::str_add_constraint;
using ::str_add_lag_con;
using ::str_set_obj_fn;
using ::str_set_rh_vec;
using ::time_elapsed;
using ::unscale;
using ::write_basis;
using ::write_lp;
using ::write_LP;
using ::write_lpex;
using ::write_mps;
using ::write_freemps;
using ::write_MPS;
using ::write_freeMPS;
using ::write_params;
using ::write_XLI;

}}} // Namespace dcs::optim::lpsolve


#endif // DCS_OPTIM_LPSOLVE_HPP
